{"version":3,"sources":["components/PersonForm.js","components/Persons.js","components/Filter.js","services/person.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","props","onSubmit","addPerson","value","newName","onChange","handlePersonChange","newPhone","handleNewPhone","type","Persons","filtteri","persons","filter","f","name","toLowerCase","includes","map","p","key","number","onClick","handleDelete","id","Filter","handleFilterChange","baseUrl","axios","get","newObject","post","delete","put","Notification","message","className","App","useState","setPersons","setNewName","setNewPhone","setFilter","errorMessage","setErrorMessage","useEffect","personService","then","response","data","event","target","console","log","preventDefault","existing","find","n","changedPerson","undefined","personObject","concat","setTimeout","window","confirm","person","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.61b8386b.chunk.js","sourcesContent":["import React from 'react'\n\nconst PersonForm=(props)=>{\n\nreturn(\n \n    <form onSubmit={props.addPerson}>\n    <div>\n      name: <input value={props.newName} onChange={props.handlePersonChange}/>\n    </div>\n    <div>number: <input value={props.newPhone} onChange={props.handleNewPhone}/></div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n\n    )\n}\nexport default PersonForm","import React from 'react'\n\nconst Persons=(props)=>{\n    const filtteri=props.persons.filter(f=>f.name.toLowerCase().includes(props.filter.toLowerCase()))\n    return(\n    <div>\n    {filtteri.map(p=><li key={p.name}>{p.name} {p.number} <button onClick={()=>props.handleDelete(p.id,p.name)}>delete</button></li>)}\n    </div>\n    )\n}\n\nexport default Persons","import React from 'react'\n\n\nconst Filter=(props)=>{\n\n    return(\n        <div>filter: <input value={props.filter} onChange={props.handleFilterChange}/></div>\n\n    )\n}\n\nexport default Filter","import axios from 'axios'\n\nconst baseUrl='/api/persons'\n\nconst getAll=()=>{\n    return axios.get(baseUrl)\n}\nconst create=(newObject)=>{\n    return axios.post(baseUrl,newObject)\n}\nconst destroy=(id)=>{\n    return axios.delete(`${baseUrl}/${id}`)\n}\nconst replace=(id,newObject)=>{\n    return axios.put(`${baseUrl}/${id}`,newObject)\n}\n\n\nexport default {getAll,create,destroy,replace}","import React from 'react'\n\nconst Notification=({message})=>{\nif (message===null){\n    return null\n}\nreturn(\n<div className='error'>\n    {message}\n</div>\n)}\nexport default Notification","import React, { useState,useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport personService from './services/person'\nimport Notification from './components/Notification'\nimport './App.css'\n\nconst App = () => {\n  const [persons, setPersons] = useState([\n    { name: 'Arto Hellas', number: '040-123456' },\n    { name: 'Ada Lovelace', number: '39-44-5323523' },\n    { name: 'Dan Abramov', number: '12-43-234345' },\n    { name: 'Mary Poppendieck', number: '39-23-6423122' }\n  ])\n  const [ newName, setNewName ] = useState('')\n  const [newPhone,setNewPhone]=useState('')\n  const [filter,setFilter]=useState('')\n  const [errorMessage,setErrorMessage]=useState(null)\n\n  useEffect(()=>{\n   personService\n   .getAll()\n   .then(response=>{\n     setPersons(response.data)\n   })\n  },[])\n  // console.log('render',persons.length,' persons')\n   \n  const handlePersonChange=(event)=>{\n    setNewName(event.target.value)\n    console.log(event.target.value)\n    \n  }\n  const handleNewPhone=(event)=>{\n    setNewPhone(event.target.value)\n    console.log(event.target.value)\n\n  }\n\n  const handleFilterChange=(event)=>{\n    setFilter(event.target.value)\n    console.log(event.target.value)\n  }\n  const handleDelete=(id,name)=>{\n  personService\n  .destroy(id)\n  .then(response=>{\n    setPersons(persons.filter(p=>p.id!==id))\n    console.log(response.data)\n  }\n    \n    )}\nconst addPerson=(event)=>{\n  event.preventDefault()\n  const existing=persons.find(n=>n.name===newName)\n  const changedPerson={...existing,number:newPhone}\n  console.log('existing ',existing)\n\n  if(existing===undefined){\n  const personObject={\n    name:newName,\n    number:newPhone,\n    key:newName\n  \n}\npersonService\n.create(personObject)\n.then(response=>{\n  setPersons(persons.concat(response.data))\n  setNewName('')\n  setErrorMessage(\n    `Added ${personObject.name}`\n    )\n  setTimeout(()=>{\n    setErrorMessage(null)\n \n  },5000)\n \n  \n})\nconsole.log('personObject ',personObject)\n}else{\n  window.confirm(`${existing.name} is already added to phonebook, replace the old number with a new one?`)\n  personService\n  .replace(existing.id,changedPerson)\n  .then(response=>{\n    console.log('response ', response.data)\n    setPersons(persons.map(person=>person.id!==existing.id?person:response.data))\n\n })\n setErrorMessage(\n   `${existing.name}'s number has been updated in the phonebook`\n   )\n setTimeout(()=>{\n   setErrorMessage(null)\n\n },5000)\n\n\n}}\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={errorMessage}/>\n<Filter handleFilterChange={handleFilterChange} filter={filter}/>\n      <h2>add new</h2>\n<PersonForm addPerson={addPerson} newName={newName} newPhone={newPhone} handlePersonChange={handlePersonChange} handleNewPhone={handleNewPhone} />\n      <h2>Numbers</h2>\n<Persons persons={persons} filter={filter} handleDelete={handleDelete}/>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}